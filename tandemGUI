#include <TGClient.h>
#include <TCanvas.h>
#include <TH1F.h>  // Include header for histograms
#include <TRandom.h>
#include <TGButton.h>
#include <TGFrame.h>
#include <TGComboBox.h>
#include <TRootEmbeddedCanvas.h>
#include <RQ_OBJECT.h>
#include <TFile.h>
#include <TTree.h>
#include <TGNumberEntry.h>  // Include for number entry widgets
#include <TGLabel.h>  // Include for label widget

class MyMainFrame {
    RQ_OBJECT("MyMainFrame")
private:
    TGMainFrame         *fMain;
    TRootEmbeddedCanvas *fEcanvas;
    TRootEmbeddedCanvas *fEcanvas2;
    TGComboBox          *fComboBox;  // Drop-down list for Branch names
    TGComboBox          *fXComboBox;  // Drop-down list for Branch names
    TGComboBox          *fCutComboBox; // Drop-down list for "Branch to cut on"
    TGComboBox          *fSecondComboBox; // New drop-down for second condition branch
    TGComboBox          *fThirdComboBox; // Third drop-down for branch to apply to (added missing combo box)
    TGComboBox          *fFourthComboBox; // Fourth drop-down for branch to apply to (added missing combo box)
    TGNumberEntry       *fBinsEntry;  // Number of bins input
    TGNumberEntry       *fMinXEntry;  // Minimum X input
    TGNumberEntry       *fMaxXEntry;  // Maximum X input
    TGNumberEntry       *fXBinsEntry;  // Number of bins input
    TGNumberEntry       *fXMinXEntry;  // Minimum X input
    TGNumberEntry       *fXMaxXEntry;  // Maximum X input
    TGNumberEntry       *fMinInput;   // Min input box
    TGNumberEntry       *fMaxInput;   // Max input box
    TGNumberEntry       *fSecondMinInput;  // Min input box for second condition
    TGNumberEntry       *fSecondMaxInput;  // Max input box for second condition
    TGNumberEntry       *fThirdMinInput; // Min input for the third branch condition
    TGNumberEntry       *fThirdMaxInput; // Max input for the third branch condition
    TGNumberEntry       *fFourthMinInput; // Min input for the third branch condition
    TGNumberEntry       *fFourthMaxInput; // Max input for the third branch condition
    TFile               *fFile1;       // ROOT file pointer
    TFile               *fFile2;       // ROOT file pointer
    TTree               *fTree;       // TTree pointer
    TTree               *fTree2;       // TTree pointer
    Int_t               fSelectedBranch; // Store selected branch index
    Int_t               fXSelectedBranch; // Store selected branch index
public:
    MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h, const char* filename1, const char* filename2);
    virtual ~MyMainFrame();
    void DoDraw();
    void OnSelect(Int_t id);
    void OnXSelect(Int_t id);
};

MyMainFrame::MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h, const char* filename1, const char* filename2) 
    : fSelectedBranch(-1), fXSelectedBranch(-1) {  // Initialize fSelectedBranch to -1 (no selection initially)

    // Open the ROOT files
    fFile1 = TFile::Open(filename1);
    if (!fFile1 || !fFile1->IsOpen()) {
        Error("MyMainFrame", "Failed to open file 1: %s", filename1);
        return;
    }
    fFile2 = TFile::Open(filename2);
    if (!fFile2 || !fFile2->IsOpen()) {
        Error("MyMainFrame", "Failed to open file 2: %s", filename2);
        return;
    }

    // Get the first TTrees from the files
    fTree = (TTree*)fFile1->Get(fFile1->GetListOfKeys()->At(0)->GetName()); // 'fTree' has remained 'fTree' for the sake of not having to rewrite large parts of later sections
    fTree2 = (TTree*)fFile2->Get(fFile2->GetListOfKeys()->At(0)->GetName());
    /*
    if (!fTree) {
        Error("MyMainFrame", "Failed to find TTree named 'tree' in the file.");
        return;
    }
    */
    
    // Ensure both fTree and fTree2 have the same branch names (not necessarily the same data of course)
    std::set<std::string> branches1, branches2;

    TObjArray* branchesArray1 = fTree->GetListOfBranches();
    TObjArray* branchesArray2 = fTree2->GetListOfBranches();
    
    // Total number of branches for percentage calculation
    int totalBranches1 = branchesArray1->GetEntries();
    int totalBranches2 = branchesArray2->GetEntries();

    // Helper lambda for live progress update
    auto print_progress = [](int i, int total, const char* tree_name) {
        int Percentage = total / 100;  // Update every 1%
        if (i % Percentage == 0) {
            fprintf(stderr, "Processing branches in %s: %d%%\r", tree_name, i / Percentage);
            fflush(stderr);
        }
    };

    for (int i = 0; i < totalBranches1; i++) {
        TBranch* branch = (TBranch*)branchesArray1->At(i);
        branches1.insert(branch->GetName());
        // Print progress for tree1
        print_progress(i, totalBranches1, "tree1");
    }
    fprintf(stderr, "\n");  // New line after progress completion

    for (int i = 0; i < totalBranches2; i++) {
        TBranch* branch = (TBranch*)branchesArray2->At(i);
        branches2.insert(branch->GetName());
        // Print progress for tree2
        print_progress(i, totalBranches2, "tree2");
    }

    // Compare branch names
    if (branches1 == branches2) {
        std::cout << "The trees in " << fFile1 << " and " << fFile2 << " have identical branch names." << std::endl;
    } else {
        std::cout << "Branch names differ between " << fFile1 << " and " << fFile2 << ":" << std::endl;
        
        // Print branches that are in the first tree but not the second
        std::cout << "Branches in " << fFile1 << " but not in " << fFile2 << ":" << std::endl;
        for (const auto& branch : branches1) {
            if (branches2.find(branch) == branches2.end()) {
                std::cout << branch << "    ";
            }
        }

        // Print branches that are in the second tree but not the first
        std::cout << "Branches in " << fFile2 << " but not in " << fFile1 << ":" << std::endl;
        for (const auto& branch : branches2) {
            if (branches1.find(branch) == branches1.end()) {
                std::cout << branch << "    ";
            }
        }
    }

    // Create a main frame
    fMain = new TGMainFrame(p, w, h);

    // Create a horizontal frame to hold the canvas and widgets side by side
    TGHorizontalFrame *hframe = new TGHorizontalFrame(fMain, w, h);

    // Create canvas widget (on the left)
    fEcanvas = new TRootEmbeddedCanvas("Ecanvas", hframe, 700, 700);
    hframe->AddFrame(fEcanvas, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY, 5, 5, 5, 1));

    // Create canvas widget (on the left)
    fEcanvas2 = new TRootEmbeddedCanvas("Ecanvas2", hframe, 700, 700);
    hframe->AddFrame(fEcanvas, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY, 10, 10, 10, 1));

    // Create a vertical frame for buttons and drop-down list (on the right)
    TGVerticalFrame *vframe = new TGVerticalFrame(hframe, 200, 140);

    // Create and add the Exit button at the top (before all other widgets)
    TGTextButton *exit = new TGTextButton(vframe, "&Exit", "gApplication->Terminate(0)");
    vframe->AddFrame(exit, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Create a vertical frame for the labels and combo boxes (Branch name and Branch to cut on)
    TGVerticalFrame *comboFrame = new TGVerticalFrame(vframe, 200, 60);

    // "Branch name:" label and ComboBox
    TGLabel *branchLabel = new TGLabel(comboFrame, "Y branch name:");
    comboFrame->AddFrame(branchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fComboBox = new TGComboBox(comboFrame, "Select y-axis branch", 50);
    fComboBox->Select(1); // Default selection (1)
    fComboBox->Connect("Selected(Int_t)", "MyMainFrame", this, "OnSelect(Int_t)");
    fComboBox->Resize(200, 25);
    comboFrame->AddFrame(fComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(comboFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Now add the number entry widgets (Bins, Min x, Max x) between the two combo boxes

    // Create a horizontal frame for the three input boxes (Bins, Min x, Max x)
    TGHorizontalFrame *hInputFrame = new TGHorizontalFrame(vframe, 200, 120);

    // Bins label and input box
    TGVerticalFrame *binsFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *binsLabel = new TGLabel(binsFrame, "Bins:");
    binsFrame->AddFrame(binsLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fBinsEntry = new TGNumberEntry(binsFrame, 100, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEAAnyNumber);
    fBinsEntry->SetWidth(60);
    binsFrame->AddFrame(fBinsEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(binsFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Min x label and input box
    TGVerticalFrame *minXFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *minXLabel = new TGLabel(minXFrame, "Min x:");
    minXFrame->AddFrame(minXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fMinXEntry = new TGNumberEntry(minXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMinXEntry->SetWidth(60);
    minXFrame->AddFrame(fMinXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(minXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Max x label and input box
    TGVerticalFrame *maxXFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *maxXLabel = new TGLabel(maxXFrame, "Max x:");
    maxXFrame->AddFrame(maxXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fMaxXEntry = new TGNumberEntry(maxXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMaxXEntry->SetWidth(60);
    maxXFrame->AddFrame(fMaxXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(maxXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(hInputFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));


    // Create a vertical frame for the labels and combo boxes (X branch name)
    TGVerticalFrame *XcomboFrame = new TGVerticalFrame(vframe, 200, 60);

    // "Branch name:" label and ComboBox
    TGLabel *XbranchLabel = new TGLabel(XcomboFrame, "X branch name:");
    XcomboFrame->AddFrame(XbranchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fXComboBox = new TGComboBox(XcomboFrame, "Select x-axis branch", 50);
    fXComboBox->Select(1); // Default selection (1)
    fXComboBox->Connect("Selected(Int_t)", "MyMainFrame", this, "OnXSelect(Int_t)");
    fXComboBox->Resize(200, 25);
    XcomboFrame->AddFrame(fXComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(XcomboFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Now add the number entry widgets (Bins, Min x, Max x) between the two combo boxes

    // Create a horizontal frame for the three input boxes (Bins, Min x, Max x)
    TGHorizontalFrame *hXInputFrame = new TGHorizontalFrame(vframe, 200, 120);

    // Bins label and input box
    TGVerticalFrame *XbinsFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XbinsLabel = new TGLabel(XbinsFrame, "Bins:");
    XbinsFrame->AddFrame(XbinsLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXBinsEntry = new TGNumberEntry(XbinsFrame, 100, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEAAnyNumber);
    fXBinsEntry->SetWidth(60);
    XbinsFrame->AddFrame(fXBinsEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XbinsFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Min x label and input box
    TGVerticalFrame *XminXFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XminXLabel = new TGLabel(XminXFrame, "Min x:");
    XminXFrame->AddFrame(XminXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXMinXEntry = new TGNumberEntry(XminXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fXMinXEntry->SetWidth(60);
    XminXFrame->AddFrame(fXMinXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XminXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Max x label and input box
    TGVerticalFrame *XmaxXFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XmaxXLabel = new TGLabel(XmaxXFrame, "Max x:");
    XmaxXFrame->AddFrame(XmaxXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXMaxXEntry = new TGNumberEntry(XmaxXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fXMaxXEntry->SetWidth(60);
    XmaxXFrame->AddFrame(fXMaxXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XmaxXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(hXInputFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Now, add the second combo box for "Branch to cut on"
    TGVerticalFrame *cutComboFrame = new TGVerticalFrame(vframe, 200, 60);

    // "Branch to cut on:" label and ComboBox
    TGLabel *cutLabel = new TGLabel(cutComboFrame, "First branch to cut on:");
    cutComboFrame->AddFrame(cutLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fCutComboBox = new TGComboBox(cutComboFrame, "Select branch", 50); // Drop-down for cutting
    fCutComboBox->Select(1); // Default selection (1)
    //fCutComboBox->Connect("Selected(Int_t)", "MyMainFrame", this, "OnSelect(Int_t)");
    fCutComboBox->Resize(200, 25);
    cutComboFrame->AddFrame(fCutComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(cutComboFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Create a horizontal frame for the Min and Max labels and input boxes
    TGHorizontalFrame *minMaxFrame = new TGHorizontalFrame(vframe, 200, 60);

    // Min label
    TGLabel *minLabel = new TGLabel(minMaxFrame, "Min");
    minMaxFrame->AddFrame(minLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Min input box (float)
    fMinInput = new TGNumberEntry(minMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMinInput->SetWidth(60);
    minMaxFrame->AddFrame(fMinInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max label
    TGLabel *maxLabel = new TGLabel(minMaxFrame, "Max");
    minMaxFrame->AddFrame(maxLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max input box (float)
    fMaxInput = new TGNumberEntry(minMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMaxInput->SetWidth(60);
    minMaxFrame->AddFrame(fMaxInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    vframe->AddFrame(minMaxFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Add second condition fields (for the second combo box, and min/max input)
    TGVerticalFrame *secondConditionFrame = new TGVerticalFrame(vframe, 200, 60);

    // Add the second branch label 
    TGLabel *secondBranchLabel = new TGLabel(secondConditionFrame, "Second branch to cut on:");
    secondConditionFrame->AddFrame(secondBranchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fSecondComboBox = new TGComboBox(secondConditionFrame, "Select branch", 50);
    fSecondComboBox->Resize(200, 25);
    secondConditionFrame->AddFrame(fSecondComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Second condition min/max inputs
    TGHorizontalFrame *secondMinMaxFrame = new TGHorizontalFrame(secondConditionFrame, 200, 60);
    TGLabel *secondMinLabel = new TGLabel(secondMinMaxFrame, "Min");
    secondMinMaxFrame->AddFrame(secondMinLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    fSecondMinInput = new TGNumberEntry(secondMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fSecondMinInput->SetWidth(60);
    secondMinMaxFrame->AddFrame(fSecondMinInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    TGLabel *secondMaxLabel = new TGLabel(secondMinMaxFrame, "Max");
    secondMinMaxFrame->AddFrame(secondMaxLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    fSecondMaxInput = new TGNumberEntry(secondMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fSecondMaxInput->SetWidth(60);
    secondMinMaxFrame->AddFrame(fSecondMaxInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    secondConditionFrame->AddFrame(secondMinMaxFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    vframe->AddFrame(secondConditionFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Create a vertical frame for the new drop-down list and the corresponding min/max input boxes
    TGVerticalFrame *branchInputFrame = new TGVerticalFrame(vframe, 200, 100);

    // "Third branch to cut on:" label and ComboBox
    TGLabel *branchInputLabel = new TGLabel(branchInputFrame, "Third branch to cut on:");
    branchInputFrame->AddFrame(branchInputLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fThirdComboBox = new TGComboBox(branchInputFrame, "Select branch", 50);
    fThirdComboBox->Resize(200, 25);
    branchInputFrame->AddFrame(fThirdComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Create a horizontal frame for the min/max input boxes
    TGHorizontalFrame *branchMinMaxFrame = new TGHorizontalFrame(branchInputFrame, 200, 60);

    // Min label
    TGLabel *branchMinLabel = new TGLabel(branchMinMaxFrame, "Min");
    branchMinMaxFrame->AddFrame(branchMinLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Min input box (float)
    fThirdMinInput = new TGNumberEntry(branchMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fThirdMinInput->SetWidth(60);
    branchMinMaxFrame->AddFrame(fThirdMinInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max label
    TGLabel *branchMaxLabel = new TGLabel(branchMinMaxFrame, "Max");
    branchMinMaxFrame->AddFrame(branchMaxLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max input box (float)
    fThirdMaxInput = new TGNumberEntry(branchMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fThirdMaxInput->SetWidth(60);
    branchMinMaxFrame->AddFrame(fThirdMaxInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Add the min/max input frame to the main frame
    branchInputFrame->AddFrame(branchMinMaxFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Add the new frame to the main vertical frame (vframe)
    vframe->AddFrame(branchInputFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Create a vertical frame for the new drop-down list and the corresponding min/max input boxes
    TGVerticalFrame *fourthConditionFrame = new TGVerticalFrame(vframe, 200, 100);

    // "Foruth branch to cut on:" label and ComboBox
    TGLabel *fourthBranchLabel = new TGLabel(fourthConditionFrame, "Fourth branch to cut on:");
    fourthConditionFrame->AddFrame(fourthBranchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fFourthComboBox = new TGComboBox(fourthConditionFrame, "Select branch", 50);
    fFourthComboBox->Resize(200, 25);
    fourthConditionFrame->AddFrame(fFourthComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Create a horizontal frame for the min/max input boxes
    TGHorizontalFrame *fourthMinMaxFrame = new TGHorizontalFrame(fourthConditionFrame, 200, 60);

    // Min label
    TGLabel *fourthMinLabel = new TGLabel(fourthMinMaxFrame, "Min");
    fourthMinMaxFrame->AddFrame(fourthMinLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Min input box (float)
    fFourthMinInput = new TGNumberEntry(fourthMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fFourthMinInput->SetWidth(60);
    fourthMinMaxFrame->AddFrame(fFourthMinInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max label
    TGLabel *fourthMaxLabel = new TGLabel(fourthMinMaxFrame, "Max");
    fourthMinMaxFrame->AddFrame(fourthMaxLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Max input box (float)
    fFourthMaxInput = new TGNumberEntry(fourthMinMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fFourthMaxInput->SetWidth(60);
    fourthMinMaxFrame->AddFrame(fFourthMaxInput, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

    // Add the min/max input frame to the main frame
    fourthConditionFrame->AddFrame(fourthMinMaxFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Add the new frame to the main vertical frame (vframe)
    vframe->AddFrame(fourthConditionFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));

    // Add the Draw button (already present)
    TGTextButton *draw = new TGTextButton(vframe, "&Draw");
    draw->Connect("Clicked()", "MyMainFrame", this, "DoDraw()"); 
    vframe->AddFrame(draw, new TGLayoutHints(kLHintsCenterX, 10, 5, 10, 5));

    hframe->AddFrame(vframe, new TGLayoutHints(kLHintsCenterY, 2, 2, 2, 2));

    fMain->AddFrame(hframe, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));

    // Set a name to the main frame
    fMain->SetWindowName("TTree Branch Selector");

    // Add "None" branch to X drop down list
    fXComboBox->AddEntry("None", 0); // Add "None" branch in first place
    fCutComboBox->AddEntry("None", 0); // Add "None" branch in first place
    fSecondComboBox->AddEntry("None", 0); // Add "None" branch in first place
    fThirdComboBox->AddEntry("None", 0); // Add "None" branch in first place
    fFourthComboBox->AddEntry("None", 0); // Add "None" branch in first place

    // Populate the ComboBoxes with branch names
    if (fTree) {
       TObjArray *branches = fTree->GetListOfBranches();
       for (int i = 0; i < branches->GetEntries(); i++) {
          TBranch *branch = (TBranch*)branches->At(i);
          fXComboBox->AddEntry(branch->GetName(), i + 1); // Add branches to ComboBox (index + 1)
          fComboBox->AddEntry(branch->GetName(), i+1); // Add branches to ComboBox (index + 1)
          fCutComboBox->AddEntry(branch->GetName(), i + 1); // Populate the cut ComboBox as well
          fSecondComboBox->AddEntry(branch->GetName(), i + 1); // Populate the second condition ComboBox
          fThirdComboBox->AddEntry(branch->GetName(), i + 1); // Add branches to ComboBox
          fFourthComboBox->AddEntry(branch->GetName(), i + 1); // Add branches to ComboBox
       }
    }

    // Map all subwindows of main frame
    fMain->MapSubwindows();

    // Initialize the layout algorithm
    fMain->Resize(fMain->GetDefaultSize());

    // Map main frame
    fMain->MapWindow();

}


void MyMainFrame::DoDraw() {

   // Retrieve the selected branch from the first combo box (branch to draw)
   if (fSelectedBranch == -1) {
      Error("DoDraw", "No branch selected.");
      return;
   }

   // Get the branch corresponding to the selected option
   TBranch *branch = (TBranch*)fTree->GetListOfBranches()->At(fSelectedBranch - 1); // fSelectedBranch is 1-based
   if (!branch) {
      Error("DoDraw", "Invalid branch selection.");
      return;
   }
   string branchName = branch->GetName();
   
   // Retrieve the number of bins, min and max X values from the input boxes
   Int_t nBins = fBinsEntry->GetNumber();
   Double_t minX = fMinXEntry->GetNumber();
   Double_t maxX = fMaxXEntry->GetNumber();

   // Retrieve the number of bins, min and max X values from the input boxes for X
   Int_t XnBins = fXBinsEntry->GetNumber();
   Double_t XminX = fXMinXEntry->GetNumber();
   Double_t XmaxX = fXMaxXEntry->GetNumber();

   TString drawCommand = "";
   TString drawStyle = "";

////

   // Build the draw command for 1D or 2D histogram with custom range, bins, and condition
   if (fXComboBox->GetSelected()==-1 || fXComboBox->GetSelected()==0){
       drawCommand = TString::Format("%s>>hist(%d,%f,%f)", branchName.c_str(), nBins, minX, maxX);
   } else {
       TBranch *Xbranch = (TBranch*)fTree->GetListOfBranches()->At(fXComboBox->GetSelected() - 1); // fSelectedBranch is 1-based
       drawCommand = TString::Format("%s:%s>>hist(%d,%f,%f,%d,%f,%f)", branchName.c_str(), Xbranch->GetName(), XnBins, XminX, XmaxX, nBins, minX, maxX);
       drawStyle = "COLZ";
       fEcanvas->GetCanvas()->SetLogz();
       fEcanvas2->GetCanvas()->SetLogz();
   }

////

   TString drawCondition = "";

   // Apply first condition (cut on selected branch)
   Int_t cutIndex = fCutComboBox->GetSelected();
   if (cutIndex > 0) {
      TBranch *cutBranch = (TBranch*)fTree->GetListOfBranches()->At(cutIndex - 1);
      Double_t cutMin = fMinInput->GetNumber();
      Double_t cutMax = fMaxInput->GetNumber();
      drawCondition += Form("%s > %.10g && %s < %.10g", cutBranch->GetName(), cutMin, cutBranch->GetName(), cutMax);
   }

   // Apply second condition if selected
   Int_t secondCutIndex = fSecondComboBox->GetSelected();
   if (secondCutIndex > 0 && cutIndex > 0) {
      TBranch *secondCutBranch = (TBranch*)fTree->GetListOfBranches()->At(secondCutIndex - 1);
      Double_t secondCutMin = fSecondMinInput->GetNumber();
      Double_t secondCutMax = fSecondMaxInput->GetNumber();
      drawCondition += Form(" && %s > %.10g && %s < %.10g", secondCutBranch->GetName(), secondCutMin, secondCutBranch->GetName(), secondCutMax);
   }

   // Apply third condition if selected 
   Int_t branchInputIndex = fThirdComboBox->GetSelected();
   if (branchInputIndex > 0 && secondCutIndex > 0) {
      TBranch *branchInput = (TBranch*)fTree->GetListOfBranches()->At(branchInputIndex - 1);
      Double_t branchMin = fThirdMinInput->GetNumber();
      Double_t branchMax = fThirdMaxInput->GetNumber();
      drawCondition += Form(" && %s > %.10g && %s < %.10g", branchInput->GetName(), branchMin, branchInput->GetName(), branchMax);
   }

   // Apply fourth condition if selected 
   Int_t fourthCutIndex = fFourthComboBox->GetSelected();
   if (fourthCutIndex > 0 && branchInputIndex > 0) {
      TBranch *fourthCutBranch = (TBranch*)fTree->GetListOfBranches()->At(fourthCutIndex - 1);
      Double_t fourthCutMin = fFourthMinInput->GetNumber();
      Double_t fourthCutMax = fFourthMaxInput->GetNumber();
      drawCondition += Form(" && %s > %.10g && %s < %.10g", fourthCutBranch->GetName(), fourthCutMin, fourthCutBranch->GetName(), fourthCutMax);
   }


   // Debug print: Check the draw strings
   std::cout << "////////  Drawn with following  ////////" << std::endl;
   std::cout << "Draw command: " << drawCommand.Data() << std::endl;
   std::cout << "Draw condition: " << drawCondition.Data() << std::endl;
   std::cout << "Draw stlye: " << drawStyle.Data() << std::endl;

   // Now, draw the histogram 1
   fEcanvas->GetCanvas()->cd();  // Ensure we are drawing on the right pad

   // Clear previous drawing on the canvas to avoid overlapping plots
   fEcanvas->GetCanvas()->Clear();

   // Draw the histogram with the constructed condition
   fTree->Draw(drawCommand,drawCondition,drawStyle);

   // Update the canvas to reflect the new drawing
   fEcanvas->GetCanvas()->Update();

////

   // Now, draw the histogram 2
   fEcanvas2->GetCanvas()->cd();  // Ensure we are drawing on the right pad

   // Clear previous drawing on the canvas to avoid overlapping plots
   fEcanvas2->GetCanvas()->Clear();

   // Draw the histogram with the constructed condition
   fTree2->Draw(drawCommand,drawCondition,drawStyle);

   // Update the canvas to reflect the new drawing
   fEcanvas2->GetCanvas()->Update();

////

}


void MyMainFrame::OnSelect(Int_t id) {
   fSelectedBranch = id;

}

void MyMainFrame::OnXSelect(Int_t id) {
   fXSelectedBranch = id;
}


MyMainFrame::~MyMainFrame() {
   // Clean up used widgets: frames, buttons, layout hints
   fMain->Cleanup();
   delete fMain;
   if (fFile) {
      fFile->Close();
      delete fFile;
   }
}

void tandemGUI(const char* filename) {
   // Popup the GUI with the given ROOT file...
   new MyMainFrame(gClient->GetRoot(), 600, 600, filename);
}
