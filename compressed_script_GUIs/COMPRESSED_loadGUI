#include <TGClient.h>
#include <TCanvas.h>
#include <TH1F.h>  // Include header for histograms
#include <TRandom.h>
#include <TGButton.h>
#include <TGFrame.h>
#include <TGComboBox.h>
#include <TRootEmbeddedCanvas.h>
#include <RQ_OBJECT.h>
#include <TFile.h>
#include <TTree.h>
#include <TGNumberEntry.h>  // Include for number entry widgets
#include <TGLabel.h>  // Include for label widget

class MyMainFrame {
    RQ_OBJECT("MyMainFrame")
private:
    TGMainFrame         *fMain;
    TRootEmbeddedCanvas *fEcanvas;
    TGComboBox          *fComboBox;  // Drop-down list for Branch names
    TGComboBox          *fXComboBox;  // Drop-down list for Branch names
    TGComboBox          *comboBoxes[4]; // Array of combo boxes for branch selection
    TGNumberEntry       *fBinsEntry;  // Number of bins input
    TGNumberEntry       *fMinXEntry;  // Minimum X input
    TGNumberEntry       *fMaxXEntry;  // Maximum X input
    TGNumberEntry       *fXBinsEntry;  // Number of bins input
    TGNumberEntry       *fXMinXEntry;  // Minimum X input
    TGNumberEntry       *fXMaxXEntry;  // Maximum X input
    TGNumberEntry       *minInputs[4]; // Array of number entry widgets for min inputs
    TGNumberEntry       *maxInputs[4]; // Array of number entry widgets for max inputs
    TFile               *fFile;       // ROOT file pointer
    TTree               *fTree;       // TTree pointer
    Int_t               fSelectedBranch; // Store selected branch index
    Int_t               fXSelectedBranch; // Store selected branch index
public:
    MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h, const char* filename);
    virtual ~MyMainFrame();
    void DoDraw();
    void OnSelect(Int_t id);
    void OnXSelect(Int_t id);
};

MyMainFrame::MyMainFrame(const TGWindow *p, UInt_t w, UInt_t h, const char* filename) 
    : fSelectedBranch(-1), fXSelectedBranch(-1) {  // Initialize fSelectedBranch to -1 (no selection initially)

    // Open the ROOT file
    fFile = TFile::Open(filename);
    if (!fFile || !fFile->IsOpen()) {
        Error("MyMainFrame", "Failed to open file: %s", filename);
        return;
    }

    // Get the TTree from the file (assuming the TTree is named "tree")
    fTree = (TTree*)fFile->Get(fFile->GetListOfKeys()->At(0)->GetName());
    if (!fTree) {
        Error("MyMainFrame", "Failed to find TTree named 'tree' in the file.");
        return;
    }

    // Create a main frame
    fMain = new TGMainFrame(p, w, h);

    // Create a horizontal frame to hold the canvas and widgets side by side
    TGHorizontalFrame *hframe = new TGHorizontalFrame(fMain, w, h);

    //// Create a vertical frame to hold the label and canvas
    TGVerticalFrame *vframe1 = new TGVerticalFrame(hframe);
    // canvas label
    TGLabel *canvasLabel1 = new TGLabel(vframe1, filename);
    vframe1->AddFrame(canvasLabel1, new TGLayoutHints(kLHintsTop | kLHintsCenterX, 5, 5, 5, 5));
    // Create canvas widget (on the left)
    fEcanvas = new TRootEmbeddedCanvas("Ecanvas", vframe1, 800, 800);
    vframe1->AddFrame(fEcanvas, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY, 5, 5, 5, 5)); // Canvas with all margins
    // Add canvas1 and label1 to hframe
    hframe->AddFrame(vframe1, new TGLayoutHints(kLHintsTop | kLHintsLeft, 5, 5, 5, 5)); // Vertical frame in the main frame

    //// Create a vertical frame for buttons and combo boxes 
    TGVerticalFrame *vframe = new TGVerticalFrame(hframe, 200, 140);
    // Create and add the Exit button at the top (before all other widgets)
    TGTextButton *exit = new TGTextButton(vframe, "&Exit", "gApplication->Terminate(0)");
    vframe->AddFrame(exit, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));
    // Create a vertical frame for the labels and combo boxes (Branch name and Branch to cut on)
    TGVerticalFrame *comboFrame = new TGVerticalFrame(vframe, 200, 60);
    // "Branch name:" label and ComboBox
    TGLabel *branchLabel = new TGLabel(comboFrame, "X branch name:");
    comboFrame->AddFrame(branchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fComboBox = new TGComboBox(comboFrame, "Select x-axis branch", 50);
    fComboBox->Select(1); // Default selection (1)
    fComboBox->Connect("Selected(Int_t)", "MyMainFrame", this, "OnSelect(Int_t)");
    fComboBox->Resize(200, 25);
    comboFrame->AddFrame(fComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    vframe->AddFrame(comboFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));
    // Create a horizontal frame for the three input boxes (Bins, Min x, Max x)
    TGHorizontalFrame *hInputFrame = new TGHorizontalFrame(vframe, 200, 120);
    // Bins label and input box
    TGVerticalFrame *binsFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *binsLabel = new TGLabel(binsFrame, "Bins:");
    binsFrame->AddFrame(binsLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fBinsEntry = new TGNumberEntry(binsFrame, 100, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEAAnyNumber);
    fBinsEntry->SetWidth(60);
    binsFrame->AddFrame(fBinsEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(binsFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    // Min x label and input box
    TGVerticalFrame *minXFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *minXLabel = new TGLabel(minXFrame, "Min x:");
    minXFrame->AddFrame(minXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fMinXEntry = new TGNumberEntry(minXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMinXEntry->SetWidth(60);
    minXFrame->AddFrame(fMinXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(minXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    // Max x label and input box
    TGVerticalFrame *maxXFrame = new TGVerticalFrame(hInputFrame, 60, 60);
    TGLabel *maxXLabel = new TGLabel(maxXFrame, "Max x:");
    maxXFrame->AddFrame(maxXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fMaxXEntry = new TGNumberEntry(maxXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fMaxXEntry->SetWidth(60);
    maxXFrame->AddFrame(fMaxXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hInputFrame->AddFrame(maxXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(hInputFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));


    // Create a vertical frame for the labels and combo boxes (X branch name)
    TGVerticalFrame *XcomboFrame = new TGVerticalFrame(vframe, 200, 60);

    // "Branch name:" label and ComboBox
    TGLabel *XbranchLabel = new TGLabel(XcomboFrame, "Y branch name:");
    XcomboFrame->AddFrame(XbranchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

    fXComboBox = new TGComboBox(XcomboFrame, "Select y-axis branch", 50);
    fXComboBox->Select(1); // Default selection (1)
    fXComboBox->Connect("Selected(Int_t)", "MyMainFrame", this, "OnXSelect(Int_t)");
    fXComboBox->Resize(200, 25);
    XcomboFrame->AddFrame(fXComboBox, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(XcomboFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Now add the number entry widgets (Bins, Min x, Max x) between the two combo boxes

    // Create a horizontal frame for the three input boxes (Bins, Min x, Max x)
    TGHorizontalFrame *hXInputFrame = new TGHorizontalFrame(vframe, 200, 120);

    // Bins label and input box
    TGVerticalFrame *XbinsFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XbinsLabel = new TGLabel(XbinsFrame, "Bins:");
    XbinsFrame->AddFrame(XbinsLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXBinsEntry = new TGNumberEntry(XbinsFrame, 100, 5, -1, TGNumberFormat::kNESInteger, TGNumberFormat::kNEAAnyNumber);
    fXBinsEntry->SetWidth(60);
    XbinsFrame->AddFrame(fXBinsEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XbinsFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Min x label and input box
    TGVerticalFrame *XminXFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XminXLabel = new TGLabel(XminXFrame, "Min x:");
    XminXFrame->AddFrame(XminXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXMinXEntry = new TGNumberEntry(XminXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fXMinXEntry->SetWidth(60);
    XminXFrame->AddFrame(fXMinXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XminXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    // Max x label and input box
    TGVerticalFrame *XmaxXFrame = new TGVerticalFrame(hXInputFrame, 60, 60);
    TGLabel *XmaxXLabel = new TGLabel(XmaxXFrame, "Max x:");
    XmaxXFrame->AddFrame(XmaxXLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));
    fXMaxXEntry = new TGNumberEntry(XmaxXFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
    fXMaxXEntry->SetWidth(60);
    XmaxXFrame->AddFrame(fXMaxXEntry, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));
    hXInputFrame->AddFrame(XmaxXFrame, new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

    vframe->AddFrame(hXInputFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 3, 4));

    // Define array for labels
    const char* branchLabels[4] = {
        "First branch to cut on:",
        "Second branch to cut on:",
        "Third branch to cut on:",
        "Fourth branch to cut on:"
    };

    // Loop to create frames and widgets for each condition
    for (int i = 0; i < 4; ++i) {
        TGVerticalFrame *condFrame = new TGVerticalFrame(vframe, 200, 100);
        TGLabel *branchLabel = new TGLabel(condFrame, branchLabels[i]);
        condFrame->AddFrame(branchLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 3, 4));

        comboBoxes[i] = new TGComboBox(condFrame, "Select branch", 50);
        comboBoxes[i]->Resize(200, 25);
        condFrame->AddFrame(comboBoxes[i], new TGLayoutHints(kLHintsCenterY, 5, 5, 3, 4));

        TGHorizontalFrame *minMaxFrame = new TGHorizontalFrame(condFrame, 200, 60);

        TGLabel *minLabel = new TGLabel(minMaxFrame, "Min");
        minMaxFrame->AddFrame(minLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));
        minInputs[i] = new TGNumberEntry(minMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
        minInputs[i]->SetWidth(60);
        minMaxFrame->AddFrame(minInputs[i], new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

        TGLabel *maxLabel = new TGLabel(minMaxFrame, "Max");
        minMaxFrame->AddFrame(maxLabel, new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));
        maxInputs[i] = new TGNumberEntry(minMaxFrame, 0, 5, -1, TGNumberFormat::kNESReal, TGNumberFormat::kNEAAnyNumber);
        maxInputs[i]->SetWidth(60);
        minMaxFrame->AddFrame(maxInputs[i], new TGLayoutHints(kLHintsLeft, 5, 5, 5, 5));

        condFrame->AddFrame(minMaxFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));
        vframe->AddFrame(condFrame, new TGLayoutHints(kLHintsCenterX, 5, 5, 5, 5));
    }

    // Add the Draw button (already present)
    TGTextButton *draw = new TGTextButton(vframe, "&Draw");
    draw->Connect("Clicked()", "MyMainFrame", this, "DoDraw()"); 
    vframe->AddFrame(draw, new TGLayoutHints(kLHintsCenterX, 10, 5, 10, 5));

    // Add the vertical frame for buttons and drop-down list to the horizotnal frame 
    hframe->AddFrame(vframe, new TGLayoutHints(kLHintsCenterY, 2, 2, 2, 2));

    // Add the horizontal frame to the main frame
    fMain->AddFrame(hframe, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));

    // Set a name to the main frame
    fMain->SetWindowName("TTree Branch Selector");

    // Add "None" branch to al the combo boxes
    fComboBox->AddEntry("None", 0);
    fXComboBox->AddEntry("None", 0);
    for (int i = 0; i < 4; ++i) comboBoxes[i]->AddEntry("None", 0);

    // Populate the ComboBoxes with branch names
    if (fTree) {
       TObjArray *branches = fTree->GetListOfBranches();
       for (int i = 0; i < branches->GetEntries(); i++) {
            TBranch *branch = (TBranch*)branches->At(i);
            fXComboBox->AddEntry(branch->GetName(), i + 1); // Add branches to ComboBox (index + 1)
            fComboBox->AddEntry(branch->GetName(), i+1); // Add branches to ComboBox (index + 1)
            for (int j = 0; j < 4; ++j) {
                comboBoxes[j]->AddEntry(branch->GetName(), i + 1);
            }
        }
    }

    // Map all subwindows of main frame
    fMain->MapSubwindows();

    // Initialize the layout algorithm
    fMain->Resize(fMain->GetDefaultSize());

    // Map main frame
    fMain->MapWindow();

}


void MyMainFrame::DoDraw() {

   // Retrieve the selected branch from the first combo box (branch to draw)
   if (fSelectedBranch == -1) {
      Error("DoDraw", "No branch selected.");
      return;
   }

   // Get the branch corresponding to the selected option
   TBranch *branch = (TBranch*)fTree->GetListOfBranches()->At(fSelectedBranch - 1); // fSelectedBranch is 1-based
   if (!branch) {
      Error("DoDraw", "Invalid branch selection.");
      return;
   }
   string branchName = branch->GetName();
   
   // Retrieve the number of bins, min and max X values from the input boxes
   Int_t nBins = fBinsEntry->GetNumber();
   Double_t minX = fMinXEntry->GetNumber();
   Double_t maxX = fMaxXEntry->GetNumber();

   // Retrieve the number of bins, min and max X values from the input boxes for X
   Int_t XnBins = fXBinsEntry->GetNumber();
   Double_t XminX = fXMinXEntry->GetNumber();
   Double_t XmaxX = fXMaxXEntry->GetNumber();

   std::string drawCommand = "";
   TString drawStyle = "";
   std::string drawTitle = "";

   // Build the draw command for 1D or 2D histogram with custom range, bins, and condition
   if (fXComboBox->GetSelected()==-1 || fXComboBox->GetSelected()==0){
       drawCommand = TString::Format("%s>>hist(%d,%.10g,%.10g)", branchName.c_str(), nBins, minX, maxX);
       drawTitle += branchName.c_str();
   } else {
       TBranch *Xbranch = (TBranch*)fTree->GetListOfBranches()->At(fXComboBox->GetSelected() - 1); // fSelectedBranch is 1-based
       drawCommand = TString::Format("%s:%s>>hist(%d,%.10g,%.10g,%d,%.10g,%.10g)", Xbranch->GetName(), branchName.c_str(), nBins, minX, maxX, XnBins, XminX, XmaxX);
       drawStyle = "COLZ";
       drawTitle += branchName.c_str();
       drawTitle += ":";
       drawTitle += Form("%s",Xbranch->GetName());
       fEcanvas->GetCanvas()->SetLogz();
   }

    // DrawCondition builder loop
    TString drawCondition = "";
    for (int i = 0; i < 4; ++i) {
        int cutIndex = comboBoxes[i]->GetSelected();
        if (cutIndex > 0) {
            if (!drawCondition.IsNull()) drawCondition += " && ";
            TBranch *cutBranch = (TBranch*)fTree->GetListOfBranches()->At(cutIndex - 1);
            double cutMin = minInputs[i]->GetNumber();
            double cutMax = maxInputs[i]->GetNumber();
            drawCondition += Form("%s > %.10g && %s < %.10g", cutBranch->GetName(), cutMin, cutBranch->GetName(), cutMax);
            drawTitle += Form(", %s[%.10g,%.10g]", cutBranch->GetName(), cutMin, cutMax);
        }
    }

    // Debug print: Check the draw strings
    std::cout << "////////  Drawn with following  ////////" << std::endl;
    std::cout << "Draw command: " << drawCommand << std::endl;
    std::cout << "Draw condition: " << drawCondition.Data() << std::endl;
    std::cout << "Draw stlye: " << drawStyle.Data() << std::endl;
    std::cout << "Draw title: " << drawTitle << std::endl;

    // Now, draw the histogram 1
    fEcanvas->GetCanvas()->cd();  // Ensure we are drawing on the right pad

    // Adjust the pad margins
    gPad->SetLeftMargin(0.125);
    gPad->SetRightMargin(0.125);
    gPad->SetTopMargin(0.125);
    gPad->SetBottomMargin(0.125);

    // Clear previous drawing on the canvas to avoid overlapping plots
    fEcanvas->GetCanvas()->Clear();

    // Draw the histogram with the constructed condition
    fTree->Draw(drawCommand.c_str(),drawCondition,drawStyle);

    // Get histogram
    if (fXComboBox->GetSelected()==-1 || fXComboBox->GetSelected()==0){
        TH1F *hist = (TH1F*)gDirectory->Get("hist");
        hist->GetXaxis()->SetTitle(fComboBox->GetSelectedEntry()->GetTitle());
        hist->SetTitle(drawTitle.c_str());
    } else {
        TH2F *hist = (TH2F*)gDirectory->Get("hist");
        hist->GetXaxis()->SetTitle(branchName.c_str());
        hist->GetYaxis()->SetTitle(fXComboBox->GetSelectedEntry()->GetTitle());
        hist->SetTitle(drawTitle.c_str());
    }

    // Update the canvas to reflect the new drawing
    fEcanvas->GetCanvas()->Update();

}


void MyMainFrame::OnSelect(Int_t id) {
   fSelectedBranch = id;

}

void MyMainFrame::OnXSelect(Int_t id) {
   fXSelectedBranch = id;
}


MyMainFrame::~MyMainFrame() {
   // Clean up used widgets: frames, buttons, layout hints
   fMain->Cleanup();
   delete fMain;
   if (fFile) {
      fFile->Close();
      delete fFile;
   }
}

void COMPRESSED_loadGUI() {
    std::vector<TString> inputFiles;
    for (int i = 1; i < gApplication->Argc(); ++i) {
        TString fileName = gApplication->Argv(i);
        if (fileName.EndsWith(".root")) {
            inputFiles.push_back(fileName);
        }
    }

    if (inputFiles.empty()) {
        std::cout << "No files provided, please provide a .root file name as an argument" << std::endl;
        return;
    }
    if (inputFiles.size() > 1) {
        std::cout << "Error: Too many input files. Please provide only one .root file." << std::endl;
        return;
    }

    std::cout << "Submitted file: " << inputFiles[0] << std::endl;
    new MyMainFrame(gClient->GetRoot(), 800, 800, inputFiles[0]);
}
