#include <TFile.h>
#include <TTree.h>
#include <TH1F.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TSystem.h>
#include <iostream>
#include <vector>
#include <string>

void plot_trees() {
    // Parse command-line arguments to get file names
    std::vector<TString> inputFiles; // Vector to store file names
    for (int i = 1; i < gApplication->Argc(); i++) {
        TString fileName = gApplication->Argv(i);
        if (fileName.EndsWith(".root")) { // Check if the argument is a .root file
            inputFiles.push_back(fileName); // Add the file name to the list
        }
    }

    if (inputFiles.empty()) {
        std::cout << "No files provided. Please provide at least one .root file name as an argument." << std::endl;
        return;
    }

    // Open all input files
    std::vector<TFile*> files;
    for (const auto& fileName : inputFiles) {
        TFile* file = TFile::Open(fileName);
        if (!file || file->IsZombie()) {
            std::cerr << "Error: Cannot open file " << fileName << std::endl;
            return;
        }
        files.push_back(file);
    }

    // Create an output ROOT file
    TFile* outputFile = new TFile("CosTh_output.root", "RECREATE");

    // Branch name to plot
    TString branchName = "CosTh";

    // Create a canvas
    TCanvas* canvas = new TCanvas("canvas", "Overlayed Branches", 800, 600);

    // Create a legend
    TLegend* legend = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend->SetBorderSize(0);
    legend->SetFillStyle(0);

    //// Draw section
    bool branchExists = false;
    for (size_t i = 0; i < files.size(); ++i) {
        // Find the first tree in the file
        TList* keys = files[i]->GetListOfKeys();
        if (!keys) {
            std::cerr << "Error: No keys found in file " << inputFiles[i] << std::endl;
            continue;
        }

        TIter next(keys);
        TObject* obj;
        TTree* tree = nullptr;
        while ((obj = next())) {
            if (files[i]->Get(obj->GetName())->InheritsFrom(TTree::Class())) {
                tree = (TTree*)files[i]->Get(obj->GetName());
                break; // Use the first tree found
            }
        }

        if (!tree) {
            std::cerr << "Error: No tree found in file " << inputFiles[i] << std::endl;
            continue;
        }

        // Check if the branch exists in the tree
        if (!tree->GetListOfBranches()->FindObject(branchName)) {
            std::cerr << "Warning: Branch " << branchName << " not found in tree " << tree->GetName() << " in file " << inputFiles[i] << std::endl;
            continue;
        }
        branchExists = true;

        // Draw the branch
        TString histName = Form("hist%d", (int)i);
        TString drawCommand = Form("%s>>%s(50)", branchName.Data(), histName.Data()); // 50 bins
        tree->Draw(drawCommand.Data(), "", "goff"); // Draw the branch

        // Retrieve the histogram
        TH1F* hist = (TH1F*)gDirectory->Get(histName);
        if (!hist) {
            std::cerr << "Error: Failed to retrieve histogram for branch " << branchName << " in file " << inputFiles[i] << std::endl;
            continue;
        }

        // Style the histogram
        hist->SetTitle(Form("Overlayed %s", branchName.Data()));
        hist->SetLineColor(i + 1); // Set line color
        hist->SetLineWidth(2);    // Set line width

        // Draw the histogram on the canvas
        if (i == 0) {
            hist->Draw(); // Draw the first histogram
        } else {
            hist->Draw("SAME"); // Overlay subsequent histograms
        }

        // Add the histogram to the legend
        legend->AddEntry(hist, inputFiles[i], "l");

        hist->SetStats(0);

    }

    if (!branchExists) {
        std::cerr << "Error: Branch " << branchName << " not found in any of the input files." << std::endl;
        outputFile->Close();
        delete outputFile;
        return;
    }

    // Draw the legend
    legend->Draw();

    // Save the canvas to the output file
    canvas->Write();

    // Close the output file
    outputFile->Close();

    // Close all input files
    for (auto file : files) {
        file->Close();
        delete file;
    }

    // Clean up
    delete legend;
    delete canvas;

    std::cout << "Plots saved in file: CosTh_output.root" << std::endl;
}